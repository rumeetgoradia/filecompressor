000000000	Could
000000001000	Morbi
0000000010010	venenatis
0000000010011	eleifend
000000001010	Duis
000000001011	entire
000000001100	resfile,
000000001101	was
00000000111	tokenize(input);
0000000100	current_sep
00000001010	correct
00000001011	".hcz");
00000001100	fd_hcz
00000001101	open(hczfile,
000000011100	O_APPEND,
000000011101	hczfile);
000000011110	++string_length;
000000011111	extension
000000100000	mauris
000000100001	magna
00000010001	enim
000000100100	odio
0000001001010	tristique,
0000001001011	vehicula.
000000100110	subdirectories
000000100111	maximus
00000010100	compression
00000010101	%s.\n",
000000101100	';
000000101101	which
000000101110	new_path;
000000101111	resfile[strlen(new_path)
00000011000	inputting
000000110010	wasn't,
0000001100110	libero.
0000001100111	diam,
0000001101	O_RDONLY);
000000111000	aliquet
0000001110010	leo
0000001110011	lorem,
000000111010	dr;
000000111011	use
0000001111000	quis.
0000001111001	Aenean
000000111101	#include<fcntl.h>
00000011111	struct
000001000000	(last_was_sep
0000010000010	neque.
0000010000011	Mauris
00000100001	read(fd_file,
000001000100	5
000001000101	3)
000001000110	(strcmp("-R",argv[1])
000001000111	strcmp("-R",argv[2])
000001001000	head->next
000001001001	recent
00000100101	4;
0000010011	test
00000101000	(5
00000101001	(codebook_length
00000101010	codebook_input
000001010110	break
000001010111	04
000001011000	somewhere
000001011001	Instead
00000101101	that
00000101110	insert_list(token);
0000010111100	cubilia
0000010111101	Curae;
000001011111	vestibulum
000001100000	(!path_check)
000001100001	printf("Warning:
00000110001	O_TRUNC,
000001100100	doesn't
000001100101	exist.
000001100110	out
000001100111	inputted
00000110100	decompress(fd_res,
0000011010100	in,
0000011010101	amet,
000001101011	strcmp(de->d_name,
000001101100	(stat(file,
000001101101	&pstat)
000001101110	insert_list("~)!(@t*#&$^");
000001101111	stat
00000111000	enter
00000111001	libero
00000111010	token)
000001110110	(strcmp(token,
000001110111	directory,
000001111000	parent
000001111001	tokens[index]
00000111101	pos_last_sep
000001111100	occuring
000001111101	free(string);
000001111110	strncpy(tokens[index],
000001111111	from
000010000000	Perform
000010000001	recursive_function(fd_codebook,
00001000001	increase
000010000100	Aliquam
000010000101	++head->freq;
0000100001100	justo,
0000100001101	erat.
0000100001110	sagittis.
0000100001111	dolor
000010001000	sized
000010001001	tokenize()
000010001010	will
000010001011	*)malloc(strlen(token)
000010001100	individual
000010001101	without
00001000111	HuffmanCodebook.
0000100100000	quam,
0000100100001	sed,
0000100100010	faucibus
0000100100011	luctus
00001001001	file);
00001001010	token_len;
000010010110	consequat
000010010111	#include<unistd.h>
000010011000	argc,
000010011001	3:
000010011010	snprintf(new_path,
000010011011	node
0000100111	path
0000101000	one
00001010010	')
0000101001100	efficitur.
0000101001101	Pellentesque
0000101001110	metus
0000101001111	rhoncus
000010101000	#include<string.h>
000010101001	keeping
000010101010	augue
0000101010110	pellentesque
0000101010111	orci,
0000101011000	Curabitur
0000101011001	viverra,
000010101101	Aditi
00001010111	Insufficient
00001011000	token[token_len]
00001011001	Cannot
000010110100	hczfile,
000010110101	most
00001011011	(fd_hcz
0000101110000	ipsum.
0000101110001	quam
000010111001	its
00001011101	just
00001011110	function
000010111110	do
000010111111	main(int
0000110000	**)malloc(sizeof(char
000011000100	trailing
000011000101	'/'
000011000110	file[strlen(file)
000011000111	Recursively
000011001000	actual
000011001001	new_path[1024];
0000110010100	varius,
0000110010101	facilisis
000011001011	has
00001100110	set
000011001110	file's
000011001111	directory's
000011010000	'b'
000011010001	if(input[i]
000011010010	input[last_whitespace
000011010011	string[string_length]
0000110101	all
000011011000	printf("Insufficient
000011011001	++ptr->next->freq;
000011011010	final
000011011011	lack
00001101110	last_whitespace
000011011110	unknown,
000011011111	give
000011100000	(de->d_type
000011100001	close(fd_file);
000011100010	0);
000011100011	size)
000011100100	after.
000011100101	method
00001110011	codebook_length
000011101000	++index;
000011101001	strncpy(temp->token,
000011101010	sure
000011101011	requires
00001110110	strlen(head->token));
000011101110	tabs
000011101111	using
000011110000	felis
000011110001	opendir(file)))
00001111001	id
000011110100	Nearly
000011110101	then
00001111011	strcpy(input,
000011111	codes,
0001000000	*)
000100000100	/
0001000001010	Sed
0001000001011	ex.
0001000001100	eu,
0001000001101	nunc.
000100000111	as2811,
00010000100	(recursive)
000100001010	sizeof(new_path),
000100001011	EXIT_SUCCESS;
0001000011	codebook_length);
0001000100	temp;
00010001010	Skipping
000100010110	strcat(new_path,
000100010111	(temp->freq
000100011000	counts
000100011001	DT_DIR)
000100011010	(head->token))
0001000110110	sollicitudin.
0001000110111	Quisque
000100011100	Continuing
000100011101	void
000100011110	count;
000100011111	break;
000100100000	4:
000100100001	remaining
00010010001	write(fd_codebook,"0\t",2);
000100100100	(strcmp("-R",
000100100101	argv[1])
000100100110	-d.\n");
000100100111	if(strcmp(ptr->next->token,
000100101	INT_MAX);
000100110000	registerd
000100110001	process
000100110010	Issue
000100110011	warning
00010011010	same
000100110110	how
000100110111	operating
00010011100	You
00010011101	head->token,
00010011110	total_length
000100111110	tincidunt
000100111111	insert_list(char
000101000000	track
000101000001	orci
000101000010	Insert
000101000011	(head
000101000100	lacinia
000101000101	Concatenate
000101000110	interdum
000101000111	#include<sys/types.h>
00010100100	sed
00010100101	'c')
000101001100	HuffmanCodebook
000101001101	DIR
000101001110	recursive_function(int
000101001111	resfile[strlen(file)
000101010000	their
000101010001	accumsan
0001010100100	nibh
0001010100101	sodales,
0001010100110	in.
0001010100111	nibh,
000101010100	next
000101010101	new_path
000101010110	creation
000101010111	operate
000101011000	Singh
000101011001	CS214:
00010101101	5);
000101011100	tortor.
000101011101	#include<limits.h>
00010101111	operation
000101100000	(!(dr
000101100001	turpis
00010110001	hczfile
00010110010	(total_length
000101100110	recursive_function(fd,
000101100111	'\n')
000101101000	new_path,
0001011010010	Vestibulum
0001011010011	ante
0001011010100	nulla.
0001011010101	Nullam
0001011010110	fermentum
0001011010111	primis
0001011011	total_length,
00010111000	".hcz")
00010111001	resfile
000101110100	(llist_node
000101110101	also,
00010111011	last
0001011110	Case
000101111100	ascending
000101111101	order
00010111111	head;
000110000000	first
000110000001	as
000110000010	essentially
000110000011	length)
0001100001000	congue.
0001100001001	auctor
0001100001010	sollicitudin
0001100001011	est.
0001100001100	auctor,
0001100001101	ligula,
000110000111	still
000110001000	Invalid
000110001001	flag(s).
000110001010	Decoding
000110001011	handle
0001100011000	nec,
0001100011001	arcu.
0001100011010	Donec
0001100011011	euismod.
000110001110	/*********************************
000110001111	(strlen(token)));
000110010000	de->d_name);
000110010001	recursive_function(0,
000110010010	1:
000110010011	dirent
000110010100	Head
000110010101	different
000110010110	tristique
000110010111	Sum
00011001100	argv[1][1];
000110011010	Goradia
000110011011	New
000110011100	Both
000110011101	can
000110011110	open(new_path,
0001100111110	tortor
0001100111111	lobortis.
0001101000	(fd_codebook
00011010010	(is_file)
000110100110	specified,
000110100111	ptr->next;
000110101	If
00011011	tokens
000111	if
001000000	**
001000001	|
001000010	token
001000011	-1;
00100010	the
001000110	(flag
00100011100	++i)
001000111010	space
0010001110110	faucibus.
00100011101110	malesuada.
00100011101111	Cras
00100011110	nec
00100011111	at
0010010	char
0010011	return
0010100000	\"%s\".
0010100001	contents
001010001	create
001010010	size);
001010011	tokens,
00101010	(char
00101011	Please
0010110000	count
0010110001	length
0010110010	(inc
0010110011	&&
0010110100	-1)
0010110101	temp
001011011	in
00101110	<
0010111100	1)
0010111101	Not
0010111110	j
0010111111	1);
001100000	recursive
001100001	arguments.
001100010	current
0011000110	input,
0011000111	.hcz
001100100	flag
001100101	for
001100110	(argc
0011001110	input
0011001111	Get
00110100	0)
00110101	try
00110110	EXIT_FAILURE;
001101110	open
0011011110	list
0011011111	enough
0011100	==
00111010	file
00111011	else
0011110000	Too
00111100010	'c'
00111100011	llist_node
001111001	!=
00111101	+
0011111	int
01	~)!(@t*#&$^
100000	{
100001	}
10001000	a
1000100100	inc
10001001010	linked
10001001011	previous
100010011	not
100010100000	arcu
100010100001	amet
100010100010	posuere
100010100011	quis
1000101001	many
100010101000	et
100010101001	mi
100010101010	dapibus
100010101011	est
100010101100	Proin
100010101101	ut
10001010111	(j
1000101100	unique
10001011010	string_length
10001011011	'
1000101110	||
10001011110	it's
10001011111	update
10001100000	input[i]
10001100001	NULL;
10001100010	inc;
10001100011	string,
1000110010	again.\n",
10001100110	j];
10001100111	'b')
10001101000	sum
10001101001	Nam
10001101010	through
10001101011	recursion
10001101100	no
10001101101	++j)
10001101110	get
100011011110	purus
100011011111	ultrices
1000111000	O_CREAT
1000111001	O_WRONLY
1000111010	0644);
1000111011	file,
1000111100	i
100011110100	Ut
100011110101	vitae
100011110110	bibendum
100011110111	egestas
10001111100	last_was_sep
10001111101	,
10001111110	(token_len
10001111111	Put
10010000000	files
10010000001	head
10010000010	(i
10010000011	temp->next
10010000100	memory.\n");
10010000101	new
1001000011	codes
100100010000	pretium
100100010001	vel
10010001001	%s.
10010001010	with
10010001011	token_len
1001000110	'\0';
1001000111	number
10010010	printf("Error:
100100110	again.\n");
10010011100	5)
10010011101	while
1001001111	1));
10010100	of
10010101	0;
1001011	/*
1001100	*/
100110100	*)malloc(sizeof(char)
1001101010	string
1001101011	into
1001101100	NULL)
1001101101	directory
100110111	is
100111	=
1010	~)!(@n*#&$^
1011000	*
101100100	and
101100101	or
101100110	1;
1011001110	+=
101100111100	maximum
1011001111010	position
1011001111011	argv)
1011001111100	3,
1011001111101	*)malloc(sizeof(llist_node));
101100111111	Create
101101000000	codebook_input,
1011010000010	codes[index]
1011010000011	strncpy(codes[index],
1011010000100	Praesent
1011010000101	#include<sys/stat.h>
1011010000110	throughout
1011010000111	"%s/%s",
1011010001000	(ptr->next
1011010001001	whitespace
1011010001010	operations
1011010001011	four
101101000110	4)
1011010001110	file;
10110100011110	rhoncus.
10110100011111	Fusce
101101001000	Traverse
1011010010010	eget
1011010010011	single
1011010010100	recursive_function
1011010010101	call
1011010010110	free(codes);
1011010010111	free(tokens);
1011010011000	(input
1011010011001	Codebook
101101001101	1],
10110100111	temp);
10110101000	delimiter
1011010100100	temp->token
1011010100101	unsigned
101101010011	already
101101010100	NULL,
10110101010100	mi,
10110101010101	efficitur
10110101010110	pharetra
10110101010111	posuere.
101101010110	decompression
1011010101110	ptr;
1011010101111	Generally
10110101100	on
1011010110100	closedir(dr);
1011010110101	sum;
101101011011	sit
1011010111000	**********************************/
1011010111001	Parse
1011010111010	(string_length
1011010111011	tokenize(char
101101011110	chars
101101011111	tempor
1011011000000	aliquam
1011011000001	recurse
10110110000100	ex
10110110000101	convallis.
10110110000110	blandit
10110110000111	ultrices.
101101100010	4]
101101100011	fd_res
101101100100	token[j]
101101100101	input[pos_last_sep
101101100110	compress(fd_hcz,
101101100111	close(fd_hcz);
10110110100000	a.
10110110100001	Nulla
10110110100010	varius
10110110100011	velit
1011011010010	it.
10110110100110	consequat.
10110110100111	Suspendisse
10110110101000	id,
10110110101001	leo.
10110110101010	risus
10110110101011	congue
10110110101100	libero,
10110110101101	gravida
10110110101110	Etiam
10110110101111	vulputate
1011011011000	corresponding
1011011011001	path.
101101101101	rid
101101101110	1]
1011011011110	operation.\n");
1011011011111	populate_arrs(char
10110111000	fd_codebook
10110111001	(size
101101110100	Separate
101101110101	(4
1011011101100	present
1011011101101	(file[strlen(file)
1011011101110	#include<stdlib.h>
1011011101111	were
10110111100	Check
101101111010	0
101101111011	write(fd_codebook,"\n",1);
1011011111000	non-garbage
1011011111001	properly
1011011111010	copy
1011011111011	identical
10110111111	delimiter,
101110000000	fd_file
1011100000010	list,
10111000000110	convallis
10111000000111	nulla
1011100000100	Minimum
1011100000101	arguments
1011100000110	corresponds
1011100000111	1)];
10111000010	1))
1011100001100	viverra
1011100001101	i++)
1011100001110	freq
1011100001111	Rumeet
1011100010000	strlen(file);
1011100010001	(file[i]
1011100010010	codebook's
1011100010011	entered
1011100010100	token,
1011100010101	an
101110001011	(strcmp(test,
101110001100	populate_arrs(codes,
1011100011010	Section
1011100011011	#include"tokenizer.h"
101110001110	open(resfile,
1011100011110	strcat(file,
1011100011111	One
10111001000000	facilisi.
10111001000001	enim.
10111001000010	odio.
10111001000011	Phasellus
1011100100010	resfile);
1011100100011	fd,
1011100100100	#include<dirent.h>
1011100100101	<=
101110010011	frequency
1011100101	to
1011100110000	specified
1011100110001	ptr->next
1011100110010	temp->freq
1011100110011	open(file,
101110011010	new_path);
101110011011	index
10111001110	flag,
10111001111	'd')
1011101000000	"..")
1011101000001	sem
1011101000010	'\n'
1011101000011	(strcmp(de->d_name,
1011101000100	2:
1011101000101	((de
1011101000110	porta
10111010001110	elit
10111010001111	mollis
1011101001000	frequencies
1011101001001	holds
101110100101	huffman(size,
10111010011	size
101110101	-
101110110000	path_check
101110110001	total
1011101100100	type
1011101100101	argv[2][1];
101110110011	read(fd_codebook,
10111011010	continue;
101110110110	'/')
1011101101110	NULL
1011101101111	always
1011101110000	but
1011101110001	end
101110111001	open("./HuffmanCodebook",
10111011101	temp,
101110111100	close(fd_res);
1011101111010	".")
1011101111011	++token_len;
101110111110	name
101110111111	Only
101111000000	write(fd_codebook,
1011110000010	string_length;
1011110000011	Size
101111000010	head,
101111000011	fd_codebook);
10111100010	it
1011110001100	length;
1011110001101	readdir(dr))
10111100011100	In
10111100011101	ligula
10111100011110	lectus
10111100011111	eros.
1011110010000	set,
1011110010001	each
101111001001	strcpy(codebook_input,
1011110010100	-b,
1011110010101	-c,
1011110010110	isn't
1011110010111	permissions
101111001100	(fd_res
1011110011010	rug5
1011110011011	perform
101111001110	'\t')
1011110011110	head->freq
1011110011111	Change
1011110100000	insert_list("~)!(@s*#&$^");
1011110100001	again
1011110100010	strlen(new_path)
1011110100011	#include"fcdatastructs.h"
101111010010	user
101111010011	arrays
1011110101000	pstat;
1011110101001	insert_list("~)!(@n*#&$^");
1011110101010	string[j]
1011110101011	input)
101111010110	(token
1011110101110	file.\n");
1011110101111	strlen(input);
1011110110000	de;
1011110110001	free(head);
101111011001	eu
1011110110100	multiple
1011110110101	whitespace,
1011110110110	argv[3
1011110110111	(recursive
101111011100	open(argv[argc
101111011101	argv[argc
1011110111100	exists
1011110111101	(current_sep
101111011111	is_file
1011111000000	(fd_file
1011111000001	Since
1011111000010	S_ISREG(pstat.st_mode);
1011111000011	i;
101111100010	ptr
1011111000110	(temp
1011111000111	nodes
10111110010	(input[i]
101111100110	respective
1011111001110	Token
1011111001111	++pos_last_sep;
101111101000	'\t'
1011111010010	strlen(file)
1011111010011	Ensure
10111110101	close(fd_codebook);
1011111011000	have
1011111011001	before
101111101101	*)malloc(strlen(string)
101111101110	write(fd_codebook,"\n",
101111101111	make
101111110000	1]);
1011111100010	Cut
1011111100011	off
10111111001	free(temp);
101111110100	0,
1011111101010	#include<stdio.h>
1011111101011	strlen(input)
101111110110	(strlen(string)));
101111110111	count_codebook(codebook_input,
10111111100	codebook
101111111010	ipsum
1011111110110	maximus.
1011111110111	volutpat
1011111111	>
11	~)!(@s*#&$^

